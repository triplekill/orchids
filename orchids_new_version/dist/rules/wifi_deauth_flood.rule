#define MAX_COUNTER 5
#define DELAY       10
#define WAITIME     15

/*
 *
 *
 */

rule deauth_flood synchronize($addr_src, $addr_dst) {


  state init {

    expect ( .wifi.subtype == "deauth" )
      goto start;

  } /* end init */


  state start! {

    $counter = 1 ;
    $start_time = .wifi.time ;
    $end_time = .wifi.time + DELAY ;
    $addr_src = .wifi.sa ;
    $addr_dst = .wifi.da ;

    expect ( .wifi.subtype == "deauth" )
      goto deauth_loop;

  } /* end start */


  state deauth_loop! {

    $counter = $counter + 1;

    expect (.wifi.subtype=="deauth"
         && $addr_src == .wifi.sa
         && $addr_dst == .wifi.da)
      goto proceed;
    expect (.wifi.time >= $end_time)
      goto the_end;
  }

  state proceed {
    case ($counter < MAX_COUNTER) goto deauth_loop;
    else goto alert;
  } /* end deauth_loop */


  state alert! {
    $end_time = .wifi.time + WAITIME ;

    print_string ("deauthentication flood [");
    print_string (str_from_int( $counter ));
    print_string (" pkts] src:");
    print_string (.wifi.sa);
    print_string (" dst:");
    print_string (.wifi.da);
    print_string ("\n");
  } /* end alert */


  state the_end! {
    /* all went well */
  } /* end the_end */


} /* end rule deauth_flood */
