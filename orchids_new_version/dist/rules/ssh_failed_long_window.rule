// WINDOW : time window in seconds
// THRESH : Number of event to detect
// DIFF_TIME : Minimum time gap between two rule instances
#define WINDOW _CTIME(36000)
#define THRESH 100
#define DIFF_TIME _CTIME(100)

// Here we detect failed ssh connection comming from the same source
#define TIME_FIELD .syslog.time
#define AGGR_INIT $source = .sshd.src_ip;
#define AGGR_VARS $source
#define AGGR_COND .sshd.src_ip == $source
#define CONDITION .sshd.action == "Failed"

#define ALERT_ACTION

/*
 * SSH bruteforce detection on long time windows
 * To use on syslog logs
 * Start ALERT_ACTION after detecting more than THRESH ssh failed from the same source in the time WINDOW
 * Multiple instances of this rules are run simultaneously for the same source ip
 * In order to not start new rule instances for each event during a burst, a time gap (DIFF_TIME) is a necessary to start a new rule instance.
 *
 * [IPS] To block the attacker in real time. See rule anti_ssh_scan.rule
 */
rule ssh_failed_long_window
{
  state init
  {
    expect (CONDITION)
      goto first;
  }

  state first!
  {
    AGGR_INIT

    $count = 0;
    // Retreive the last time a rule instance has been started
    $tmp = "long_win_foren" + str_from_ipv4($source);
    $last_rule_start = ctime_from_str(get_shared_var($tmp));
    set_shared_var($tmp, str_from_ctime(TIME_FIELD));
    $start = 1;
    if ($last_rule_start == 0)
      $last_rule_start = TIME_FIELD;
    else
      if (TIME_FIELD - $last_rule_start < DIFF_TIME)
	$start = 0;

    $begin = TIME_FIELD;
    $last = TIME_FIELD;
    $diff_begin = _CTIME(0);
    $diff_last = _CTIME(0);
    goto loop;
  }

  state loop!
  {
    $count = $count + 1;
    if ($begin != TIME_FIELD)
    {
      $diff_begin = TIME_FIELD - $begin;
      $diff_last = TIME_FIELD - $last;
    }
    $last = TIME_FIELD;

    expect ((CONDITION) && (AGGR_COND))
      goto proceed;
    expect (TIME_FIELD > $begin+WINDOW)
      goto stop;
  }

  state proceed! {
    case ($count>=THRESH) goto alert;
    else case ($diff_begin >= WINDOW) goto stop;
    else goto loop;
  }

  state alert!
  {
    $str_source = str_from_ipv4($source);
    $m = "More than " + str_from_uint(THRESH) + " events in less than " + str_from_ctime(WINDOW) + " seconds from " + $str_source ;


    $idmef = idmef_new_alert();
    xml_set_prop($idmef,
	"/*/idmef:Alert/idmef:Classification", "text", "ssh bruteforce");
    xml_set_prop($idmef,
	"/*/idmef:Alert/idmef:Source/idmef:Node/idmef:Address",
	"category", "ipv4addr");
    xml_set_str($idmef,
	"/*/idmef:Alert/idmef:Source/idmef:Node/idmef:Address/idmef:address",
	$str_source);
    xml_set_prop($idmef, "/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"severity", "medium");
    xml_set_prop($idmef, "/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"completion", "failed");
    xml_set_prop($idmef, "/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"type", "user");
    xml_set_str($idmef,
	"/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"Brute force detected");
    idmef_write_alert($idmef);

    print_string ("Alert : More than ");
    print_string (str_from_uint(THRESH));
    print_string (" events in less than ");
    print_string (str_from_ctime(WINDOW));
    print_string (" seconds (");
    print_string (str_from_ipv4($source));
    print_string (")\n");
  }

  state stop!
  {
    /* all went well */
  }
}
