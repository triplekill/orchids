// WINDOW : time window in seconds
// THRESH : Number of event to detect
// DIFF_TIME : Minimum time gap between two rule instances
#define WINDOW 36000
#define THRESH 100
#define DIFF_TIME 100

// Here we detect failed ssh connection comming from the same source
#define TIME_FIELD .syslog.time
#define AGGR_INIT $source = .sshd.src_ip;
#define AGGR_VARS $source
#define AGGR_COND .sshd.src_ip == $source
#define CONDITION .sshd.action == "Failed"

#define ALERT_ACTION

/*
 * SSH bruteforce detection on long time windows
 * To use on syslog logs
 * Start ALERT_ACTION after detecting more than THRESH ssh failed from the same source in the time WINDOW
 * Multiple instances of this rules are run simultaneously for the same source ip
 * In order to not start new rule instances for each event during a burst, a time gap (DIFF_TIME) is a necessary to start a new rule instance.
 *
 * [IPS] To block the attacker in real time. See rule anti_ssh_scan.rule
 */
rule ssh_failed_long_window
{
  state init
  {
    expect (CONDITION)
      goto first;
  }

  state first
  {
    AGGR_INIT

    $count = 0;
    // Retreive the last time a rule instance has been started
    $tmp = "long_win_foren" + str_from_ipv4($source);
    $last_rule_start = get_shared_var($tmp);
    set_shared_var($tmp, TIME_FIELD);
    $start = 1;
    if ($last_rule_start == 0)
      $last_rule_start = TIME_FIELD;
    else
      if (difftime(TIME_FIELD, $last_rule_start) < DIFF_TIME)
	$start = 0;

    $begin = TIME_FIELD;
    $last = TIME_FIELD;
    $diff_begin = 0;
    $diff_last = 0;
    $mark = mark();
    expect ($start == 1)
      goto loop;
  }

  state loop
  {
    // Delete the waiting threads from the previous state
    mark_cut($mark);
    mark_update($mark);

    $count = $count + 1;
    if ($begin != TIME_FIELD)
    {
      $diff_begin = difftime(TIME_FIELD, $begin);
      $diff_last = difftime(TIME_FIELD, $last);
    }
    $last = TIME_FIELD;

    expect ((CONDITION)
	    && (AGGR_COND)
	    && ($diff_begin < WINDOW)
	    && ($count >= THRESH))
      goto alert;

    expect ((CONDITION)
	    && (AGGR_COND)
	    && ($diff_begin < WINDOW)
	    && ($count < THRESH))
      goto loop;

    expect ((CONDITION)
	    && (AGGR_COND)
	    && ($diff_begin > WINDOW))
      goto stop;

    expect (defined(TIME_FIELD)
	    && (difftime(TIME_FIELD, $begin) > WINDOW))
      goto stop;

  }


  state alert
  {
    $m = "More than " + str_from_int(THRESH) + " events in less than " + str_from_int(WINDOW) + " seconds from " + $source ;

    $str_source = str_from_ipv4($source);

    $idmef = idmef_new_alert();
    xml_set_prop($idmef,
	"/*/idmef:Alert/idmef:Classification", "text", "ssh bruteforce");
    xml_set_prop($idmef,
	"/*/idmef:Alert/idmef:Source/idmef:Node/idmef:Address",
	"category", "ipv4addr");
    xml_set_str($idmef,
	"/*/idmef:Alert/idmef:Source/idmef:Node/idmef:Address/idmef:address",
	$str_source);
    xml_set_prop($idmef, "/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"severity", "medium");
    xml_set_prop($idmef, "/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"completion", "failed");
    xml_set_prop($idmef, "/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"type", "user");
    xml_set_str($idmef,
	"/*/idmef:Alert/idmef:Assessment/idmef:Impact",
	"Brute force detected");
    idmef_write_alert($idmef);
    xml_free($idmef);

    $m = "Alert : More than " + str_from_int(THRESH) + " events in less than " + str_from_int(WINDOW) + " seconds (" + str_from_ipv4($source)  +")"; \
    print ($m);
    kill_threads();
  }

  state stop
  {
    kill_threads();
  }
}
