
/*
** Rule demo
** Automatically generated by Rulegen
** on: Tue Oct 25 18:29:12 CEST 2005
*/



rule demo {
  state init {
  /* no  action */
    goto before_7_start;
  }

  state before_7_start {
  /* no  action */
    goto event_0_start;
  }

  state event_0_start {
  /* no  action */
    expect ( .snare.syscall == "ptrace"  )
      goto event_0_end;
  }

  state event_0_end {
  /* no  action */
    goto repeat_6_start;
  }

  state repeat_6_start {
  /* no  action */
    $repeat_6_count = 0;
    goto repeat_6_loop;
  }

  state repeat_6_loop {
    expect ( $repeat_6_count >= 3 )
      goto repeat_6_end;
    expect ( $repeat_6_count < 3 )
      goto repeat_6_begin;
  }

  state repeat_6_begin {
    goto oneamong_5_start;
  }

  state oneamong_5_start {
  /* no  action */
    goto oneamong_5_start_1;
    goto oneamong_5_start_2;
  }

  state oneamong_5_start_1 {
    goto event_1_start;
  }

  state event_1_start {
  /* no  action */
    expect ( .snare.syscall == "poketext"  )
      goto event_1_end;
  }

  state event_1_end {
  /* no  action */
    goto oneamong_5_end;
  }

  state oneamong_5_start_2 {
    goto after_4_start;
  }

  state after_4_start {
  /* no  action */
    goto event_3_start;
  }

  state event_3_start {
  /* no  action */
    expect ( .snare.syscall == "modprobe"  )
      goto event_3_end;
  }

  state event_3_end {
  /* no  action */
    goto event_2_start;
  }

  state event_2_start {
  /* no  action */
    expect ( .snare.syscall == "getregs"  )
      goto event_2_end;
  }

  state event_2_end {
  /* no  action */
    goto after_4_end;
  }

  state after_4_end {
  /* no  action */
    goto oneamong_5_end;
  }

  state oneamong_5_end {
  /* no  action */
    $repeat_6_count = $repeat_6_count + 1;

    goto repeat_6_loop;
  }

  state repeat_6_end {
  /* no  action */ 
    goto before_7_end;
  }

  state before_7_end {
  /* no  action */
 
    goto end;
  }
  state end {
  /* no  action */
    /* end of rule */
  }
}
