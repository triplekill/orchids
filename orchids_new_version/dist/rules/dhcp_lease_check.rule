
/* Quick and dirty dhcp lease check detector, through snort.
*/

rule dhcp_lease_check {
  state init {
    expect (.dhcpd.method == "DHCPDISCOVER")
      goto discover;
  }

  state discover! {
    $mac = .dhcpd.mac;
    print_string ("DHCP discover: a machine is waking up to the network\n");

    expect (.dhcpd.method == "DHCPOFFER" &&
	.dhcpd.mac == $mac)
      goto offer;
    expect (.dhcpd.method != "DHCPOFFER" &&
	.dhcpd.mac == $mac)
      goto alert_offer;
  }

  state alert_offer! {
    print_string ("DHCP expecting offer, did not get any\n");
    report ();
  }

  state offer! {
    $ip = .dhcpd.ip;

    expect (.dhcpd.method == "DHCPREQUEST" &&
	.dhcpd.mac == $mac &&
	.dhcpd.ip == $ip)
      goto request;
    expect (.dhcpd.method == "DHCPRELEASE" &&
	.dhcpd.mac == $mac)
      goto release;
    expect (.dhcpd.method != "DHCPREQUEST" &&
	.dhcpd.method != "DHCPRELEASE" &&
	.dhcpd.mac == $mac)
      goto alert_request;
  }

  state alert_request! {
    print_string ("DHCP offer gotten, should have gotten request\n");
    report ();
  }

  state request! {
    expect (.dhcpd.method == "DHCPACK" &&
	.dhcpd.mac == $mac &&
	.dhcpd.ip == $ip)
      goto offer;
    expect (.dhcpd.method == "DHCPREQUEST" &&
	.dhcpd.mac == $mac &&
	.dhcpd.ip == $ip)
      goto request;
    expect (.dhcpd.method == "DHCPREQUEST" &&
	.dhcpd.mac == $mac &&
	.dhcpd.ip != $ip)
      goto alert_client_request;
    expect (.dhcpd.method == "DHCPRELEASE" &&
	.dhcpd.mac == $mac)
      goto release;
    expect (.dhcpd.method != "DHCPACK" &&
	.dhcpd.method != "DHCPRELEASE" &&
	.dhcpd.mac == $mac)
      goto alert_ack;
    expect (.dhcpd.method == "DHCPACK" &&
	.dhcpd.mac == $mac &&
	.dhcpd.ip != $ip)
      goto alert_bad_ip;
  }

  state alert_client_request! {
    print_string ("DHCP client requests a new IP without first releasing\n");
    report ();
  }

  state alert_ack! {
    print_string ("DHCP request, no ack answered\n");
    report ();
  }

  state alert_bad_ip! {
    print_string ("DHCP server tried to change client ip address!\n");
    report ();
  }

  state release! {
    print_string ("DHCP release, OK\n");
    /* all ends well */
  }
}
