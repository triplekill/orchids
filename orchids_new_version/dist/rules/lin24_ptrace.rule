/*
** Linux-2.4.x SYS_ptrace attack on modprobe
*/

#include "linux32syscall.h"
#include "linuxptrace.h"
/* #include "linuxsignal.h" */

rule ptrace
{
  state init
  {
    expect (.rawsnare.syscall == SYS_ptrace &&
        .rawsnare.ptrace_req == PTRACE_ATTACH &&
        .rawsnare.euid != 0 &&
        .rawsnare.egid != 0)
       goto ptrace_attach;
  }

  state ptrace_attach
  {
    $attack_pid = .rawsnare.pid;
    $target_pid = .rawsnare.ptrace_pid;
    $attacker_uid = .rawsnare.euid;
    $counter = 0;

    expect (.rawsnare.syscall == SYS_execve &&
        .rawsnare.path == "/sbin/modprobe" &&
        .rawsnare.pid == $target_pid)
      goto exec_modprobe;
  }

  state exec_modprobe
  {
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_ptrace &&
        .rawsnare.ptrace_req == PTRACE_SYSCALL &&
        .rawsnare.ptrace_pid == $target_pid)
      goto ptrace_syscall;
  }

  state ptrace_syscall
  {
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_ptrace &&
        .rawsnare.ptrace_req == PTRACE_GETREGS &&
        .rawsnare.ptrace_pid == $target_pid)
      goto ptrace_getregs;

    /* if regs are guessed, attacker don't use GETREGS */
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_ptrace &&
        .rawsnare.ptrace_req == PTRACE_POKETEXT &&
        .rawsnare.ptrace_pid == $target_pid)
      goto ptrace_poketext;

  }

  state ptrace_getregs
  {
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_ptrace &&
        .rawsnare.ptrace_req == PTRACE_POKETEXT &&
        .rawsnare.ptrace_pid == $target_pid)
      goto ptrace_poketext;
  }

  state ptrace_poketext
  {
    $counter = $counter + 1;

    /* get all repetitions of poketext */
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_ptrace &&
        .rawsnare.ptrace_req == PTRACE_POKETEXT &&
        .rawsnare.ptrace_pid == $target_pid &&
        $counter < 10)
      goto ptrace_poketext;

    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_ptrace &&
        .rawsnare.ptrace_req == PTRACE_DETACH &&
        .rawsnare.ptrace_pid == $target_pid)
      goto ptrace_detach;
  }

  state ptrace_detach!
  {
    print_string ("Preliminary report :\n");

    $str = "ssh root@10.0.0.100 'echo You have been kicked by OrchIDS... | write user ; kill -9 $(ps -u " +
           str_from_uint($attacker_uid) +
           " -o pid= | xargs) ; chsh -s /sbin/nologin user ' >/dev/null 2>/dev/null &";
    /* system($str); */

    /* continue auditing while we are trying to kill attacker */

    /* audit all events made by the target program */
    expect (.rawsnare.pid == $target_pid)
      goto audit_loop;
  }

  state audit_loop!
  {
    expect (.rawsnare.pid == $target_pid)
      goto audit_loop;

    expect (.rawsnare.pid == $target_pid &&
        .rawsnare.syscall == SYS_exit)
      goto make_report;

    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_exit)
      goto make_report;

    expect (.rawsnare.pid == $target_pid &&
        .rawsnare.syscall == SYS_kill)
      goto make_report;

    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == SYS_kill)
      goto make_report;
  }

  state make_report!
  {
    print_string ("Final report :\n");
    report();
  }
}
