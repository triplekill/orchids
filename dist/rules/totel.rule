/*
** Exemple d'Eric Totel
*/

rule totel
{
  state init {
    expect (.syslog.prog == "e0")
      goto have_e0;
  }

  state have_e0 {
    $counter = 0;
    expect (.syslog.prog == "f0")
      goto have_f0_1;

    /* expect (.syslog.prog == "f") */
      goto f_loop_2;

    expect (.syslog.prog == "e1")
      goto have_e1;
  }

  state have_f0_1 {
    expect (.syslog.prog == "g0")
      goto have_g0_1;
  }

  state have_g0_1 {
    /* expect (.syslog.prog == "f") */
      goto f_loop_1;
  }

  state f_loop_1 onlyonce {
    $counter = $counter + 1;
    expect (.syslog.prog == "f" && $counter <= 10)
      goto f_loop_1;
    expect ($counter > 10)
      goto alarm;
  }

  state f_loop_2 onlyonce {
    $counter = $counter + 1;
    /* print($counter); */
    expect (.syslog.prog == "f" && $counter <= 10)
      goto f_loop_2;
    expect ($counter > 10)
      goto have_10_f;
  }

  state have_10_f {
    expect (.syslog.prog == "f0")
      goto have_f0_2;
  }

  state have_f0_2 {
    expect (.syslog.prog == "g0")
      goto alarm;
  }

  state have_e1 {
    expect (.syslog.prog == "e2")
      goto have_e2;

    expect (.syslog.prog == "f1")
      goto have_f1;
  }

  state have_e2 {
    expect (.syslog.prog == "e3")
      goto alarm;
    expect (.syslog.prog == "f1")
      goto have_f1;
  }

  state have_f1 {
    /* expect (.syslog.prog == "f2") */
      goto f2_loop;
  }

  state f2_loop onlyonce {
    $counter = $counter + 1;
    expect (.syslog.prog == "f2" && $counter <= 20)
      goto f2_loop;
    expect ($counter > 20)
      goto have_20_f2;
  }

  state have_20_f2 {
    expect (.syslog.prog == "f3")
      goto reject;
  }

  state reject {
    print("reject\n");
    dump_stack();
    dump_dot_pathtree();
    shutdown();
  }

  state alarm {
    print("alarm\n");
    dump_stack();
    /* dump_dot_pathtree(); */
    shutdown();
  }

}
