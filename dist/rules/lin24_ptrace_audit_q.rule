/*
** Linux-2.4.x SYS_ptrace attack on modprobe
*/

rule ptrace
{
  state init
  {
    expect (.rawsnare.syscall == "(26) SYS_ptrace" &&
        .rawsnare.ptrace_req == "(16) PTRACE_ATTACH" &&
        .rawsnare.euid != 0 &&
        .rawsnare.egid != 0)
       goto q1;
  }

  state q1
  {
    $attack_pid = .rawsnare.pid;
    $target_pid = .rawsnare.ptrace_pid;
    $attacker_uid = .rawsnare.euid;

    expect (.rawsnare.syscall == "(11) SYS_execve" &&
        .rawsnare.path == "/sbin/modprobe" &&
        .rawsnare.pid == $target_pid)
      goto q2;
  }

  state q2
  {
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(26) SYS_ptrace" &&
        .rawsnare.ptrace_req == "(24) PTRACE_SYSCALL" &&
        .rawsnare.ptrace_pid == $target_pid)
      goto q3;
  }

  state q3
  {
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(26) SYS_ptrace" &&
        .rawsnare.ptrace_req == "(12) PTRACE_GETREGS" &&
        .rawsnare.ptrace_pid == $target_pid)
      goto q4;

    /* if regs are guessed, attacker don't use GETREGS */
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(26) SYS_ptrace" &&
        .rawsnare.ptrace_req == "(4) PTRACE_POKETEXT" &&
        .rawsnare.ptrace_pid == $target_pid)
      goto q5;

  }

  state q4
  {
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(26) SYS_ptrace" &&
        .rawsnare.ptrace_req == "(4) PTRACE_POKETEXT" &&
        .rawsnare.ptrace_pid == $target_pid)
      goto q5;
  }

  state q5
  {
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(26) SYS_ptrace" &&
        .rawsnare.ptrace_req == "(17) PTRACE_DETACH" &&
        .rawsnare.ptrace_pid == $target_pid)
      goto q6;


    /* get all repetitions of poketext */
/*
    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(26) SYS_ptrace" &&
        .rawsnare.ptrace_req == "(4) PTRACE_POKETEXT" &&
        .rawsnare.ptrace_pid == $target_pid)
      goto ptrace_poketext;
*/
  }

  state q6
  {
    print("Preliminary report :");

    $str = "ssh root@mure 'echo You have been kicked by OrchIDS... | write user && kill -9 $(ps -u " +
           str_from_int($attacker_uid) +
           " -o pid= | xargs) && chsh -s /sbin/nologin user'&";
    /* system($str); */
    dump_dot_pathtree();
    kill_threads();
    dump_stack();

    /* continue audit while we are trying to kill attacker */

    /* audit all events made by the target program */
    expect (.rawsnare.pid == $target_pid)
      goto q7;
  }

  state q7
  {
    expect (.rawsnare.pid == $target_pid)
      goto q7;

    expect (.rawsnare.pid == $target_pid &&
        .rawsnare.syscall == "(1) SYS_exit")
      goto q8;

    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(1) SYS_exit")
      goto q8;

    expect (.rawsnare.pid == $target_pid &&
        .rawsnare.syscall == "(37) SYS_kill")
      goto q8;

    expect (.rawsnare.pid == $attack_pid &&
        .rawsnare.syscall == "(37) SYS_kill")
      goto q8;
  }

  state q8
  {
    print("Final report :");
    dump_stack();
    dump_dot_pathtree();
    show_stats();
    shutdown();
  }
}
